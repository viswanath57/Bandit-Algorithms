for ( k in c(1:10) ){ # How many trails
j <- c()
for ( i in c(1:10)){
j = c( unique( sample(v, length(v), replace = TRUE) ), j)
}
UniqueSamples <- c(length ( unique(j) ), UniqueSamples)
}
print ( mean(UniqueSamples) )
v <- c(1:100000)
UniqueSamples <- c()
for ( k in c(1:10) ){ # How many trails
j <- c()
for ( i in c(1:10)){
j = c( unique( sample(v, length(v), replace = TRUE) ), j)
}
UniqueSamples <- c(length ( unique(j) ), UniqueSamples)
}
print ( mean(UniqueSamples) )
v <- c(1:100000)
UniqueSamples <- c()
for ( k in c(1:10) ){ # How many trails
j <- c()
for ( i in c(1:10)){
j = c( unique( sample(v, length(v), replace = TRUE) ), j)
}
UniqueSamples <- c(length ( unique(j) ), UniqueSamples)
}
print ( mean(UniqueSamples) )
v <- c(1:100000)
UniqueSamples <- c()
for ( k in c(1:10) ){ # How many trails
j <- c()
for ( i in c(1:15)){
j = c( unique( sample(v, length(v), replace = TRUE) ), j)
}
UniqueSamples <- c(length ( unique(j) ), UniqueSamples)
}
print ( mean(UniqueSamples) )
v <- c(1:100000)
UniqueSamples <- c()
for ( k in c(1:10) ){ # How many trails
j <- c()
for ( i in c(1:15)){
j = c( unique( sample(v, length(v), replace = TRUE) ), j)
}
UniqueSamples <- c(length ( unique(j) ), UniqueSamples)
}
print ( mean(UniqueSamples) )
v <- c(1:100000)
UniqueSamples <- c()
for ( k in c(1:10) ){ # How many trails
j <- c()
for ( i in c(1:15)){
j = c( unique( sample(v, length(v), replace = TRUE) ), j)
}
UniqueSamples <- c(length ( unique(j) ), UniqueSamples)
}
print ( mean(UniqueSamples) )
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
7902 / 37375
2/0
2/Inf
Inf / Inf
x <- 4
x
y = -4
y
x+y
x^z
x^2
x^2 - 2 *y
log(10)
ln
e
exp()
exp
e
exp(1)
log ( exp(1) )
x <- c(1,2,34)
c (x,c(-1,2), x)
1;20
1:20
1:20:4
1:20:5
1:5:20
4:-10
seq(1,2,0.1)
seq(5,5*2,0.2)
q()
q()
q()
demo()
demo(graphics)
demo(graphics)
?par
demo()
library(randomForest)
example()
example("randomForest")
help.start()
vignette()
data()
help("randomForest")
help.search("randomForest")
??randomForest
help("apropos")
help(options)
getwd()
options()
options()
options(digit=3)
options(digit = 7)
runif(1)
options(digit = 2)
runif(1)
options(digits = 7)
runif(20)
runif(10)
runif(2)
options(digits = 3)
runif(2)
x <- runif( 10)
summary(x)
hist(x)
x <- runif(10000)
hist(x)
head(x)
x <- runif(100000)
head(x)
x <- runif(100000)
head(x)
x <- runif(10)
hist(x)
summary(x)
?runif
options(digits = 1)
runif(10)
options(digits=1)
runif(10)
hist(runif(100))
hist(runif(10000))
?sink
example(sink)
sf
d
sf
?sink
.libPaths()
library()
search()
library(r[part])
library(rpart)
search()
update.packages()
update()
update
update.packages()
installed.packages()
help(package="randomForest")
?lm
help
help()
help.search()
help.search
help.search()
help.start()
install.packages("vcd")
help(package="vcd")
help(package="randomForest")
library(vcd)
dim(Arthritis)
head(Arthritis)
Arthritis
data("Arthritis")
example("Arthritis")
?xtabs
install.packages("clickstream")
install.packages(" 	Rcmdr")
install.packages("Rcmdr")
Rcmdr
Rcmdr()
help(package="Rcmdr")
library(Rcmdr)
update.packages("pbkrtest")
help(package="Rcmdr")
library(Rcmdr)
library(rattle)
rattle()
install.packages(c("JGR","Deducer","DeducerExtras"))
install.packages(c("JGR", "Deducer", "DeducerExtras"))
library(JGR)
JGR()
Sys.getenv()
Sys.getenv("R_HOME")
options(prompt = "$$$")
1+2
options(prompt="Viswa@Work$")
1_2
1+2
options(prompt="Viswa@Work > ")
1+2
cat ("\n Goodbye at ", date(), "\n" )
cat ("\n Goodbye at ", date(), "\n" )
cat ("\n Goodbye at ", date(), "\n" )
Sys.getenv("repos")
Sys.getenv("R_HOME")
Sys.getenv()
options("repos")
getOption("repos")
ls()
rm()
ls()
rm( ls() )
t <- ls()
t
rm(t)
ls()
?rm
?ls
?rm
example(rm)
rm ( list =ls() )
ls()
.libPaths
.libPaths()
getOption("R_HOME")
options("R_HOME")
Sys.getenv("R_HOME
")
Sys.getenv("R_HOME")
Sys.getenv("R_HOME")
Sys.getenv("HOME")
q()
q()
runif(2)
q()
runif(3)
{}
{1+3}
{1+3 ; 3+4}
q()
q()
q()
function(){
cat ("\n Goodbye at ", date(), "\n" )
}
t <-function(){
cat ("\n Goodbye at ", date(), "\n" )
}
t()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
1+2
1   +   2
q()
clear()
options()
q()
library(xlsx)
install.packages("xlsx")
library(foreign)
?foreign
?write.foreign
matrix()
example(matrix)
as.matrix(1:10,nrow=2, ncol=5)
as.matrix(c(1:10),nrow=2, ncol=5)
matrix(c(1:10),nrow=2, ncol=5)
t <- matrix(c(1:10),nrow=2, ncol=5)
x <- matrix(c(1:10),nrow=2, ncol=5)
t
x
cbind(t,x)
colMeans(t)
x <- c(1,2,3)
diag(A)
diag(x)
diag(3)
diag(6)
library(Matrix)
library(matlab)
install.packages("matlab")
library(matrixStats)
install.packages("matrixStats")
help(package="AER")
help(package="AER")
??AER
install.packages("AER")
install.packages("Amelia")
library(doBy)
install.packages("doBy")
library(effects)
library(FactoMineE)
library(FactoMineR)
install.packages("FactoMineR")
library(gmodels)
help(package=gmodels)
library(rms)
install.packages("rms")
install.packages("rms")
library(installr)
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q9
q()
q()
q()
q()
q()
q()
ls()
ls()
q()
q()
library(randomForest)
?randomForest
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
update()
upgrade()
?upgrade
q()
]
q()
q()
q()
q()
ls*()
ls()
dir()
ls()
dir()
ls()
dir()
q(
)
q()
dir()
ls()
q()
q()
q()
q()
install.packages("lightgbm")
install.packages("base64enc")
install.packages("lightgbm")
q()
q()
q()
q()
q()
q()
dd <- data.frame(a = gl(3,4), b = gl(4,1,12))
dd
gl(3,4)
model.matrix(~ a + b, dd)
terms(dd)
attr(terms(object), "variables").
attr(terms(object), "variables")
attr(terms(dd), "variables")
model.matrix(~ a , dd)
model.matrix(~ a + b, dd)
model.matrix(~  b, dd)
model.matrix(~  a, dd)
cbind( dd$a,model.matrix(~  a, dd))
cbind( dd$b,model.matrix(~  b, dd))
group <- factor( c(1,1,2,2) )
model.matrix(~ group)
group
q()
setwd("D:/")
setwd("Personnel/Teaching/")
setwd("Python for Data Analysis/")
setwd("BanditsBook/python")
# Annealing softmax
library("plyr")
library("ggplot2")
results <- read.table("annealing_softmax_results.tsv", sep = '\t')
names(results) <- c("Sim", "T", "ChosenArm", "Reward", "CumulativeReward")
head(results)
head(results, 100)
stats <- ddply(results,
c("T"),
function (df) {mean(df$Reward)})
head(stats)
head(stats, 100)
head(stats, 100)ggplot(stats, aes(x = T, y = V1)) +
geom_line() +
ylim(0, 1) +
xlab("Time") +
ylab("Average Reward") +
ggtitle("Performance of the Softmax Algorithm")
stats
ggplot(stats, aes(x = T, y = V1)) +
geom_line() +
ylim(0, 1) +
xlab("Time") +
ylab("Average Reward") +
ggtitle("Performance of the Softmax Algorithm")
stats <- ddply(results,
c("T"),
function (df) {mean(df$Reward)})
ggplot(stats, aes(x = T, y = V1)) +
geom_line() +
ylim(0, 1) +
xlab("Time") +
ylab("Average Reward") +
ggtitle("Performance of the Softmax Algorithm")
ggsave("annealing_softmax_average_reward.pdf")
stats <- ddply(results,
c("T"),
function (df) {mean(df$ChosenArm == 2)})
ggplot(stats, aes(x = T, y = V1)) +
geom_line() +
ylim(0, 1) +
xlab("Time") +
ylab("Average Reward") +
ggtitle("Performance of the Softmax Algorithm")
ggsave("annealing_softmax_average_accuracy.pdf")
stats <- ddply(results,
c("T"),
function (df) {mean(df$CumulativeReward)})
ggplot(stats, aes(x = T, y = V1)) +
geom_line() +
ylim(0, 1) +
xlab("Time") +
ylab("Average Reward") +
ggtitle("Performance of the Softmax Algorithm")
ggsave("annealing_softmax_average_cumulativreward.pdf")
stats
stats <- ddply(results,
c("T"),
function (df) {mean(df$CumulativeReward)})
ggplot(stats, aes(x = T, y = V1)) +
geom_line() +
ylim(0, 1) +
xlab("Time") +
ylab("Average Reward") +
ggtitle("Performance of the Softmax Algorithm")
ggsave("annealing_softmax_average_cumulativreward.pdf")
stats
head(results)
stats <- ddply(results,
c("T"),
function (df) {mean(df$CumulativeReward)})
stats
ggplot(stats, aes(x = T, y = V1)) +
geom_line() +
xlab("Time") +
ylab("Average Reward") +
ggtitle("Performance of the Softmax Algorithm")
ggsave("annealing_softmax_average_cumulativreward.pdf")
ls()
q()
